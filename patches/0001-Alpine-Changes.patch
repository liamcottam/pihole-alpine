From ca2f7e90641064e372d0ff3cbae14e305b25e7f0 Mon Sep 17 00:00:00 2001
From: Liam Cottam <liam.cottam1@gmail.com>
Date: Wed, 13 Nov 2019 12:52:12 +0000
Subject: [PATCH] Alpine Changes

---
 Makefile          | 17 ++++-------------
 config.c          |  2 +-
 dnsmasq/crypto.c  |  4 ++--
 dnsmasq/dnsmasq.c |  2 +-
 dnsmasq/dnsmasq.h |  3 ++-
 shmem.c           |  2 +-
 signals.c         | 21 +++++++++++++++++++++
 7 files changed, 32 insertions(+), 19 deletions(-)

diff --git a/Makefile b/Makefile
index 009e18f..385a14e 100644
--- a/Makefile
+++ b/Makefile
@@ -45,12 +45,6 @@ GCCVERSION8 := $(shell expr `$(CC) -dumpversion | cut -f1 -d.` \>= 8)
 HARDENING_FLAGS=-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -O3 -Wl,-z,relro,-z,now -pie -fPIE -fexceptions -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro
 DEBUG_FLAGS=-rdynamic -fno-omit-frame-pointer
 
-# -DSQLITE_OMIT_LOAD_EXTENSION: This option omits the entire extension loading mechanism from SQLite, including sqlite3_enable_load_extension() and sqlite3_load_extension() interfaces. (needs -ldl linking option, otherwise)
-# -DSQLITE_DEFAULT_MEMSTATUS=0: This setting causes the sqlite3_status() interfaces that track memory usage to be disabled. This helps the sqlite3_malloc() routines run much faster, and since SQLite uses sqlite3_malloc() internally, this helps to make the entire library faster.
-# -DSQLITE_OMIT_DEPRECATED: Omitting deprecated interfaces and features will not help SQLite to run any faster. It will reduce the library footprint, however. And it is the right thing to do.
-# -DSQLITE_OMIT_PROGRESS_CALLBACK: The progress handler callback counter must be checked in the inner loop of the bytecode engine. By omitting this interface, a single conditional is removed from the inner loop of the bytecode engine, helping SQL statements to run slightly faster.
-SQLITEFLAGS=-DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_DEFAULT_MEMSTATUS=0 -DSQLITE_OMIT_DEPRECATED -DSQLITE_OMIT_PROGRESS_CALLBACK -DSQLITE_OMIT_MEMORYDB
-
 # -Wall: This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros. This also enables some language-specific warnings described in C++ Dialect Options and Objective-C and Objective-C++ Dialect Options.
 # -Wextra: This enables some extra warning flags that are not enabled by -Wall.
 # -Wno-unused-parameter: Disable warning for unused parameters. For threads that don't need arguments, we still have to provide a void* args which is then unused.
@@ -92,13 +86,13 @@ EXTRAWARN=-Werror -Waddress -Wlogical-op -Wmissing-field-initializers -Woverleng
 -Wfloat-equal -Wunsafe-loop-optimizations -funsafe-loop-optimizations -Wbad-function-cast -Wwrite-strings -Wparentheses -Wlogical-op -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -Winline $(EXTRAWARNGCC8)
 
 # -FILE_OFFSET_BITS=64: used by stat(). Avoids problems with files > 2 GB on 32bit machines
-CCFLAGS=-std=gnu11 -I$(IDIR) $(WARNFLAGS) -D_FILE_OFFSET_BITS=64 $(HARDENING_FLAGS) $(DEBUG_FLAGS) $(CFLAGS) $(SQLITEFLAGS)
+CCFLAGS=-std=gnu11 -I$(IDIR) $(WARNFLAGS) -D_FILE_OFFSET_BITS=64 $(HARDENING_FLAGS) $(DEBUG_FLAGS) $(CFLAGS)
 
 # for FTL we need the pthread library
 # for dnsmasq we need the nettle crypto library and the gmp maths library
 # We link the two libraries statically. Although this increases the binary file size by about 1 MB, it saves about 5 MB of shared libraries and makes deployment easier
-#LIBS=-pthread -lnettle -lgmp -lhogweed
-LIBS=-pthread -lrt -Wl,-Bstatic -L/usr/local/lib -lhogweed -lgmp -lnettle -Wl,-Bdynamic
+#LIBS=-pthread -lrt -lsqlite3 -lnettle -lgmp -lhogweed -lunwind
+LIBS=-pthread -lrt -Wl,-Bstatic -L/usr/local/lib -lsqlite3 -lunwind -lhogweed -lgmp -lnettle -Wl,-Bdynamic
 # Flags for compiling with libidn : -lidn
 # Flags for compiling with libidn2: -lidn2
 
@@ -126,10 +120,7 @@ $(ODIR):
 $(DNSMASQODIR):
 	mkdir -p $(DNSMASQODIR)
 
-$(ODIR)/sqlite3.o: $(IDIR)/sqlite3.c | $(ODIR)
-	$(CC) -c -o $@ $< $(CCFLAGS)
-
-pihole-FTL: $(_FTLOBJ) $(_DNSMASQOBJ) $(ODIR)/sqlite3.o
+pihole-FTL: $(_FTLOBJ) $(_DNSMASQOBJ)
 	$(CC) $(CCFLAGS) -o $@ $^ $(LIBS)
 
 .PHONY: clean force install
diff --git a/config.c b/config.c
index c867a6a..594e9fc 100644
--- a/config.c
+++ b/config.c
@@ -27,7 +27,7 @@ void getLogFilePath(void)
 	    ((fp = fopen(FTLfiles.snapConf, "r")) == NULL) &&
 	    ((fp = fopen("pihole-FTL.conf", "r")) == NULL))
 	{
-		printf("Notice: Found no readable FTL config file");
+		printf("Notice: Found no readable FTL config file\n");
 	}
 
 	// Read LOGFILE value if available
diff --git a/dnsmasq/crypto.c b/dnsmasq/crypto.c
index 3b98974..2c3748e 100644
--- a/dnsmasq/crypto.c
+++ b/dnsmasq/crypto.c
@@ -294,7 +294,7 @@ static int dnsmasq_ecdsa_verify(struct blockdata *key_data, unsigned int key_len
 	  if (!(key_256 = whine_malloc(sizeof(struct ecc_point))))
 	    return 0;
 
-	  nettle_ecc_point_init(key_256, &nettle_secp_256r1);
+	  nettle_ecc_point_init(key_256, nettle_get_secp_256r1());
 	}
 
       key = key_256;
@@ -307,7 +307,7 @@ static int dnsmasq_ecdsa_verify(struct blockdata *key_data, unsigned int key_len
 	  if (!(key_384 = whine_malloc(sizeof(struct ecc_point))))
 	    return 0;
 
-	  nettle_ecc_point_init(key_384, &nettle_secp_384r1);
+	  nettle_ecc_point_init(key_384, nettle_get_secp_384r1());
 	}
 
       key = key_384;
diff --git a/dnsmasq/dnsmasq.c b/dnsmasq/dnsmasq.c
index dca13c4..40e7cc6 100644
--- a/dnsmasq/dnsmasq.c
+++ b/dnsmasq/dnsmasq.c
@@ -1177,7 +1177,7 @@ static void sig_handler(int sig)
 	  if (option_bool(OPT_DEBUG))
 	    exit(EC_MISC);
 	  else
-	    event = EVENT_TIME;
+	    event = EVENT_TERM;
 	}
       else
 	return;
diff --git a/dnsmasq/dnsmasq.h b/dnsmasq/dnsmasq.h
index 4eb6455..6590989 100644
--- a/dnsmasq/dnsmasq.h
+++ b/dnsmasq/dnsmasq.h
@@ -95,7 +95,7 @@ typedef unsigned long long u64;
 #if defined(HAVE_SOLARIS_NETWORK)
 #  include <sys/sockio.h>
 #endif
-#include <sys/poll.h>
+#include <poll.h>
 #include <sys/wait.h>
 #include <sys/time.h>
 #include <sys/un.h>
@@ -139,6 +139,7 @@ typedef unsigned long long u64;
 
 #if defined(HAVE_LINUX_NETWORK)
 #include <linux/capability.h>
+#include <linux/sockios.h>
 /* There doesn't seem to be a universally-available
    userspace header for these. */
 extern int capset(cap_user_header_t header, cap_user_data_t data);
diff --git a/shmem.c b/shmem.c
index dd868ba..7928c9d 100644
--- a/shmem.c
+++ b/shmem.c
@@ -80,7 +80,7 @@ size_t addstr(const char *str)
 	counters->strings_MAX = shm_strings.size;
 
 	// Copy the C string pointed by str into the shared string buffer
-	strncpy(&((char*)shm_strings.ptr)[shmSettings->next_str_pos], str, len);
+	memcpy(&((char*)shm_strings.ptr)[shmSettings->next_str_pos], str, len);
 	((char*)shm_strings.ptr)[shmSettings->next_str_pos + len] = '\0';
 
 	// Increment string length counter
diff --git a/signals.c b/signals.c
index a0e3952..01e5042 100644
--- a/signals.c
+++ b/signals.c
@@ -9,7 +9,12 @@
 *  Please see LICENSE file for your rights under this license. */
 
 #include "FTL.h"
+#ifdef __GLIBC__
 #include <execinfo.h>
+#else
+#define UNW_LOCAL_ONLY
+#include <libunwind.h>
+#endif
 
 volatile sig_atomic_t killed = 0;
 time_t FTLstarttime = 0;
@@ -41,6 +46,7 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 	}
 
 	// Try to obtain backtrace. This may not always be helpful, but it is better than nothing
+#ifdef __GLIBC__
 	void *buffer[255];
 	const int calls = backtrace(buffer, sizeof(buffer)/sizeof(void *));
 	char ** bcktrace = backtrace_symbols(buffer, calls);
@@ -58,6 +64,21 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 		}
 	}
 	free(bcktrace);
+#else
+	unw_cursor_t cursor; unw_context_t uc;
+  unw_word_t sp, offset;
+	int i = 0;
+
+  unw_getcontext(&uc);
+  unw_init_local(&cursor, &uc);
+  while (unw_step(&cursor) > 0) {
+    unw_get_reg(&cursor, UNW_REG_SP, &sp);
+
+		char symbol[256] = {"<unknown>"};
+    unw_get_proc_name(&cursor, symbol, sizeof(symbol), &offset);
+		logg("B[%04i]: %s+0x%lx [0x%lx]", i++, symbol, offset, (long) sp);
+  }
+#endif
 
 	logg("Thank you for helping us to improve our FTL engine!");
 
-- 
2.24.0

